@inherits LayoutComponentBase
@inject SweetAlertService Swal;
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorageService
@inject AuthService _authService
@inject UsuarioEstadoService UserStateService


<MudThemeProvider />
<MudDialogProvider Position="DialogPosition.Center" />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <!-- Mostrar el nombre del usuario -->
        @if (UserStateService.CurrentUser != null)
        {
            <MudText Typo="Typo.body1" Class="mr-3">Bienvenido, @UserStateService.CurrentUser.UserName</MudText>
        }
        <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="CerrarSesion" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Sistema de Facturacion</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>



@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task CerrarSesion()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Desea salir?",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No"
            });

        if (result.IsConfirmed)
        {
            // Usar AuthService para manejar el cierre de sesión
            await _authService.LogoutAsync();
            _navigationManager.NavigateTo("/login");
        }
    }
}