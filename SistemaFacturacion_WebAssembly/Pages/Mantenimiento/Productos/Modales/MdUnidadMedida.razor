@inject IUnidadMedidaService _unidadMedidaService
@inject ISnackbar _snackBar

<MudDialog Style="width:400px">
    <DialogContent>
        <MudContainer Style="max-height: 400px; overflow-y: scroll" Class="m-0 p-0">
            <EditForm Model="@_unidadMedida" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />

                <MudTextField @bind-Value="@_unidadMedida.Descripcion"
                              Class="mb-3"
                              Label="Descripcion"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Badge"
                              For="@(()=>_unidadMedida.Descripcion)" />
                                              

                <MudCardActions Class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@Cancel" Class="mr-2">Cancelar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Guardar</MudButton>
                </MudCardActions>
            </EditForm>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public UnidadMedidaDTO _unidadMedida { get; set; } = new UnidadMedidaDTO();
      

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(_unidadMedida.UnidadmedidaId);
    }    

    private async Task Guardar()
    {        
        UnidadMedidaCreateDTO _nuevaunidadMedida = new UnidadMedidaCreateDTO();
        _nuevaunidadMedida.Descripcion = _unidadMedida.Descripcion;
        string _mensaje = "";
        bool _resultado;

        if (_unidadMedida.UnidadmedidaId != 0)
        {
            var response = await _unidadMedidaService.Actualizar<UnidadMedidaDTO>(_unidadMedida.UnidadmedidaId, _nuevaunidadMedida);
            _resultado = response.isExitoso;
            _mensaje = "El registro fue modificado con éxito";
        }
        else
        {
            var response = await _unidadMedidaService.Crear<UnidadMedidaDTO>(_nuevaunidadMedida);
            _resultado = response.isExitoso;
            _mensaje = "El registro fue creado con éxito";
        }

        if (_resultado)
        {
            _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
            _snackBar.Add("Error al guardar cambios", Severity.Error, a => a.VisibleStateDuration = 500);
    }
}
