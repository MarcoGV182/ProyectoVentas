@inject ITipoImpuestoService _tipoImpuestoService
@inject ISnackbar _snackBar

<MudDialog Style="width:400px">
    <DialogContent>
        <MudContainer Style="max-height: 400px; overflow-y: scroll" Class="m-0 p-0">
            <EditForm Model="@_tipoimpuesto" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />

                <MudTextField @bind-Value="@_tipoimpuesto.Descripcion"
                              Class="mb-3"
                              Label="Descripcion"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Badge"
                              For="@(()=>_tipoimpuesto.Descripcion)"
                              HelperText="Ingrese la Descripción del impuesto" />

                <MudNumericField @bind-Value="@_tipoimpuesto.Baseimponible"
                                 Class="mb-3"
                                 Label="Base Imponible"
                                 Variant="Variant.Outlined"
                                 Adornment="Adornment.End"
                                 AdornmentIcon="@Icons.Material.Filled.Numbers" />

                <MudNumericField @bind-Value="@_tipoimpuesto.Porcentajeiva"
                                 Class="mb-3"
                                 Label="Porcentaje IVA"
                                 Variant="Variant.Outlined"
                                 Adornment="Adornment.End"
                                 AdornmentIcon="@Icons.Material.Filled.Numbers"
                                 HelperText="Ingrese el Porcentaje de IVA del impuesto" />

                <MudCardActions Class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@Cancel" Class="mr-2">Cancelar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Guardar</MudButton>
                </MudCardActions>
            </EditForm>
        </MudContainer>
    </DialogContent>    
</MudDialog>

@code {

    [Parameter]
    public TipoImpuestoDTO _tipoimpuesto { get; set; } = new TipoImpuestoDTO();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(_tipoimpuesto.TipoimpuestoId);
    }


    private void Cancel()
    {
        Console.WriteLine("Cancelar presionado");
        MudDialog.Cancel();
    }

    private async Task Guardar()
    {
        TipoImpuestoCreateDTO _nuevoimpuesto = new TipoImpuestoCreateDTO();
        _nuevoimpuesto.Descripcion = _tipoimpuesto.Descripcion;
        _nuevoimpuesto.Baseimponible = _tipoimpuesto.Baseimponible;
        _nuevoimpuesto.Porcentajeiva = _tipoimpuesto.Porcentajeiva;
        string _mensaje = "";
        bool _resultado;

        if (_tipoimpuesto.TipoimpuestoId != 0)
        {
            var response = await _tipoImpuestoService.Actualizar<TipoImpuestoDTO>(_tipoimpuesto.TipoimpuestoId, _nuevoimpuesto);
            _resultado = response.isExitoso;
            _mensaje = "El registro fue modificado con exito";
        }
        else
        {
            var response = await _tipoImpuestoService.Crear<TipoImpuestoDTO>(_nuevoimpuesto);
            _resultado = response.isExitoso;
            _mensaje = "El registro fue creado con exito";
        }

        if (_resultado)
        {
            _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
            _snackBar.Add("Error al guardar cambios", Severity.Error, a => a.VisibleStateDuration = 500);

    }
}
