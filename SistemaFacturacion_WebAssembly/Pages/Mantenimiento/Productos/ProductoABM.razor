@page "/producto/ABM/{productoId:int?}"
@using MudBlazor
@using System.Net.Http.Json
@inject NavigationManager Navigation
@inject HttpClient Http
@inject ISnackbar _snackBar
@inject IProductoService _productoService
@inject ITipoImpuestoService _tipoImpuestoService
@inject ICategoriaService _CategoriaService
@inject IPresentacionService _presentacionService
@inject IMarcaService _marcarvice
@inject IUnidadMedidaService _unidadMedidaService

<MudGrid Spacing="2">
    <!-- Título -->
    <MudItem xs="12">
        <MudText Typo="Typo.h5" Class="mb-4">@Titulo</MudText>
    </MudItem>

    <!-- Contenedor del formulario -->
    <MudItem xs="12" sm="12" md="12">
        <MudPaper Class="pa-4" Style="height: auto; overflow-y: auto;">
            <EditForm Model="producto" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />

                <!-- Campo 0: Código -->
                @if (producto.ArticuloId > 0)
                {
                    <MudGrid Spacing="4">
                        <MudItem xs="12" md="6">
                            <MudInput Value="@producto.ArticuloId" Disabled="true" />
                        </MudItem>
                    </MudGrid>
                }

                <MudGrid Spacing="2">
                    <!-- Campo 1: Descripción -->
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Descripción" @bind-Value="@producto.Descripcion" For="@(() => producto.Descripcion)"/>
                    </MudItem>

                    <!-- Campo 2: Precio -->
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Precio" Format="N0" @bind-Value="@producto.PrecioBase" For="@(() => producto.PrecioBase)" />
                    </MudItem>

                    <!-- Campo 3: Precio de compra -->
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Precio de compra" Format="N0" @bind-Value="@producto.PrecioCompra" For="@(() => producto.PrecioCompra)" />
                    </MudItem>

                    <!-- Campo 4: Stock mínimo -->
                    <MudItem xs="12" md="6">
                        <MudNumericField Label="Stock mínimo" @bind-Value="@producto.Stockminimo" For="@(() => producto.Stockminimo)" />
                    </MudItem>

                    <!-- Campo 5: Código de barra -->
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Código de barra" @bind-Value="@producto.Codigobarra" For="@(() => producto.Codigobarra)" MaxLength="50" />
                    </MudItem>

                    <!-- Campo 6: Fecha de vencimiento -->
                    <MudItem xs="12" md="6">
                        <MudTextField InputType="InputType.Date" Label="Fecha de vencimiento" @bind-Value="@producto.FechaVencimiento" Format="yyyy-MM-dd" For="@(() => producto.FechaVencimiento)" />
                    </MudItem>

                    <!-- Campo 7: Presentación -->
                    <MudItem xs="12" md="6">
                        <MudSelect Label="Presentación" Variant="Variant.Outlined" Placeholder="Seleccione una presentación" Class="mb-3" T="PresentacionDTO" @bind-Value="presentacionSeleccionada" ToStringFunc="(item) => item?.Descripcion">
                            @if (ListaPresentacion.Any())
                            {
                                foreach (var rol in ListaPresentacion)
                                {
                                    <MudSelectItem Value="@rol">@rol.Descripcion</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Campo 8: Marca -->
                    <MudItem xs="12" md="6">
                        <MudSelect Label="Marca" Variant="Variant.Outlined" Placeholder="Seleccione una marca" Class="mb-3" T="MarcaDTO" @bind-Value="marcaSeleccionada" ToStringFunc="(item) => item?.Descripcion">
                            @if (ListaMarcas.Any())
                            {
                                foreach (var rol in ListaMarcas)
                                {
                                    <MudSelectItem Value="@rol">@rol.Descripcion</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Campo 9: Categoría -->
                    <MudItem xs="12" md="6">
                        <MudSelect Label="Categoría" Variant="Variant.Outlined" Placeholder="Seleccione una categoría" Class="mb-3" T="CategoriaProductoDTO" @bind-Value="CategoriaSeleccionado" ToStringFunc="(item) => item?.Descripcion">
                            @if (ListaCategoria.Any())
                            {
                                foreach (var rol in ListaCategoria)
                                {
                                    <MudSelectItem Value="@rol">@rol.Descripcion</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Campo 10: Unidad de medida -->
                    <MudItem xs="12" md="6">
                        <MudSelect Label="Unidad de Medida" Variant="Variant.Outlined" Placeholder="Seleccione la UM" Class="mb-3" T="UnidadMedidaDTO" @bind-Value="unidadMedidaSeleccionada" ToStringFunc="(item) => item?.Descripcion">
                            @if (ListaUnidadMedida.Any())
                            {
                                foreach (var rol in ListaUnidadMedida)
                                {
                                    <MudSelectItem Value="@rol">@rol.Descripcion</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Campo 11: Tipo de impuesto -->
                    <MudItem xs="12" md="6">
                        <MudSelect Label="Tipo Impuesto" Variant="Variant.Outlined" Placeholder="Seleccione el tipo de impuesto" Class="mb-3" T="TipoImpuestoDTO" @bind-Value="impuestoSeleccionado" ToStringFunc="(item) => item?.Descripcion">
                            @if (ListaImpuestos.Any())
                            {
                                foreach (var rol in ListaImpuestos)
                                {
                                    <MudSelectItem Value="@rol">@rol.Descripcion</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Campo 12: Estado -->
                    <MudItem xs="12" md="6">
                        <MudSelect Label="Estado" Variant="Variant.Outlined" Placeholder="Seleccione el estado" Class="mb-3" T="string" @bind-Value="@producto.Estado">
                            <MudSelectItem Value="@("A")">Activo</MudSelectItem>
                            <MudSelectItem Value="@("I")">Inactivo</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <!-- Campo 13: Observación -->
                    <MudItem xs="12">
                        <MudTextField Label="Observación" Variant="Variant.Outlined" Lines="3" @bind-Value="@producto.Observacion" For="@(() => producto.Observacion)" Class="mb-3" />
                    </MudItem>

                </MudGrid>

                <!-- Botones -->
                <MudItem xs="12">
                    <MudPaper Class="pa-4 mt-4">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Guardar</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancelar">Cancelar</MudButton>
                    </MudPaper>
                </MudItem>

            </EditForm>
        </MudPaper>
    </MudItem>

</MudGrid>




@code {
    private string Titulo;
    private MudForm form;
    private ProductoDTO producto = new ProductoDTO();

    public List<MarcaDTO> ListaMarcas { get; set; } = new List<MarcaDTO>();
    public MarcaDTO marcaSeleccionada { get; set; }

    public List<TipoImpuestoDTO> ListaImpuestos { get; set; } = new List<TipoImpuestoDTO>();
    public TipoImpuestoDTO impuestoSeleccionado { get; set; }

    public List<CategoriaProductoDTO> ListaCategoria { get; set; } = new List<CategoriaProductoDTO>();
    public CategoriaProductoDTO CategoriaSeleccionado { get; set; }

    public List<PresentacionDTO> ListaPresentacion { get; set; } = new List<PresentacionDTO>();
    public PresentacionDTO presentacionSeleccionada { get; set; }

    public List<UnidadMedidaDTO> ListaUnidadMedida { get; set; } = new List<UnidadMedidaDTO>();
    public UnidadMedidaDTO unidadMedidaSeleccionada { get; set; }

    [Parameter]
    public int? ProductoId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(producto.ArticuloId);
        await ObtenerListados();

        if (ProductoId == null)
            Titulo = "Registrar nuevo Producto";
        else
            Titulo = "Actualizar Producto";


        try
        {
            marcaSeleccionada = producto.Marca == null ? null : ListaMarcas.FirstOrDefault(p => p.MarcaId == producto.Marca.MarcaId);
            impuestoSeleccionado = producto.TipoImpuesto == null ? null : ListaImpuestos.FirstOrDefault(p => p.TipoimpuestoId == producto.TipoImpuesto.TipoimpuestoId);
            presentacionSeleccionada = producto.Presentacion == null ? null : ListaPresentacion.FirstOrDefault(p => p.PresentacionId == producto.Presentacion.PresentacionId);
            CategoriaSeleccionado = producto.Categoria == null ? null : ListaCategoria.FirstOrDefault(p => p.CategoriaId == producto.Categoria.CategoriaId);
            unidadMedidaSeleccionada = producto.UnidadMedida == null ? null : ListaUnidadMedida.FirstOrDefault(p => p.UnidadMedidaId == producto.UnidadMedida.UnidadMedidaId);
            //estadoSeleccionado = _producto.Estado;
        }
        catch (Exception ex)
        {
            _snackBar.Add($"Error al obtener los datos: {ex.Message}", Severity.Error);
        }
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/Producto");
    }

    private async Task ObtenerListados()
    {
        try
        {
            if (ProductoId.HasValue)
            {
                var resultProduct = await _productoService.Obtener<ProductoDTO>(ProductoId.Value);
                if (resultProduct.isExitoso)
                {
                    producto = (ProductoDTO)resultProduct.Resultado;
                }
            }



            var marcaResult = await _marcarvice.ObtenerTodos<List<MarcaDTO>>();
            if (marcaResult.isExitoso)
            {
                ListaMarcas = marcaResult.Resultado;
            }

            var TipoImpuetoResult = await _tipoImpuestoService.ObtenerTodos<List<TipoImpuestoDTO>>();
            if (TipoImpuetoResult.isExitoso)
            {
                ListaImpuestos = TipoImpuetoResult.Resultado;
            }

            var CategoriaResult = await _CategoriaService.ObtenerTodos<List<CategoriaProductoDTO>>();
            if (CategoriaResult.isExitoso)
            {
                ListaCategoria = CategoriaResult.Resultado;
            }

            var presentacionResult = await _presentacionService.ObtenerTodos<List<PresentacionDTO>>();
            if (presentacionResult.isExitoso)
            {
                ListaPresentacion = presentacionResult.Resultado;
            }

            var unidadMedidaResult = await _unidadMedidaService.ObtenerTodos<List<UnidadMedidaDTO>>();
            if (unidadMedidaResult.isExitoso)
            {
                ListaUnidadMedida = unidadMedidaResult.Resultado;
            }
        }
        catch (Exception ex)
        {
            _snackBar.Add($"Error al obtener los datos: {ex.Message}", Severity.Error);
        }

    }

    private async Task Guardar()
    {
        string _mensaje = "";
        bool _resultado;

        if (producto.ArticuloId != 0)
        {
            ProductoUpdateDTO _editRegistro = new ProductoUpdateDTO();
            _editRegistro.Descripcion = producto.Descripcion;
            _editRegistro.PrecioBase = producto.PrecioBase;
            _editRegistro.Observacion = producto.Observacion;
            _editRegistro.Estado = producto.Estado;
            _editRegistro.Codigobarra = producto.Codigobarra;
            _editRegistro.Stockminimo = producto.Stockminimo;
            _editRegistro.PrecioBase = producto.PrecioBase;
            _editRegistro.PrecioCompra = producto.PrecioCompra;
            _editRegistro.Fechavencimiento = producto.FechaVencimiento;
            _editRegistro.Idpresentacion = presentacionSeleccionada != null ? presentacionSeleccionada.PresentacionId : null;
            _editRegistro.MarcaId = marcaSeleccionada != null ? marcaSeleccionada.MarcaId : null;
            _editRegistro.CategoriaId = CategoriaSeleccionado != null ? CategoriaSeleccionado.CategoriaId : null;
            _editRegistro.Unidadmedidanro = unidadMedidaSeleccionada != null ? unidadMedidaSeleccionada.UnidadMedidaId : null;
            _editRegistro.TipoimpuestoId = impuestoSeleccionado.TipoimpuestoId;

            var response = await _productoService.Actualizar<ProductoDTO>(producto.ArticuloId, _editRegistro);
            _resultado = response.isExitoso;
            _mensaje = "El registro fue modificado con éxito";
        }
        else
        {
            ProductoCreateDTO _nuevoRegistro = new ProductoCreateDTO();
            _nuevoRegistro.Descripcion = producto.Descripcion;
            _nuevoRegistro.PrecioBase = producto.PrecioBase;
            _nuevoRegistro.Observacion = producto.Observacion;
            _nuevoRegistro.Estado = producto.Estado;
            _nuevoRegistro.Codigobarra = producto.Codigobarra;
            _nuevoRegistro.Stockminimo = producto.Stockminimo;
            _nuevoRegistro.PrecioBase = producto.PrecioBase;
            _nuevoRegistro.PrecioCompra = producto.PrecioCompra;
            _nuevoRegistro.Fechavencimiento = producto.FechaVencimiento;
            _nuevoRegistro.Idpresentacion = presentacionSeleccionada != null ? presentacionSeleccionada.PresentacionId : null;
            _nuevoRegistro.MarcaId = marcaSeleccionada != null ? marcaSeleccionada.MarcaId : null;
            _nuevoRegistro.CategoriaId = CategoriaSeleccionado != null ? CategoriaSeleccionado.CategoriaId : null;
            _nuevoRegistro.Unidadmedidanro = unidadMedidaSeleccionada != null ? unidadMedidaSeleccionada.UnidadMedidaId : null;
            _nuevoRegistro.TipoimpuestoId = impuestoSeleccionado.TipoimpuestoId;

            var response = await _productoService.Crear<ProductoDTO>(_nuevoRegistro);
            _resultado = response.isExitoso;
            _mensaje = "El registro fue creado con éxito";
        }

        if (_resultado)
        {
            _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);
            Navigation.NavigateTo("/Producto");
        }
        else
            _snackBar.Add("Error al guardar cambios", Severity.Error, a => a.VisibleStateDuration = 500);
    }
}
