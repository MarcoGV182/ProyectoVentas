@page "/servicio"
@attribute [Authorize]
@inject IServicioService _servicioService
@inject IDialogService _dialogServicio
@inject ISnackbar _snackBar
@inject NavigationManager _navigationManager
@inject SweetAlertService Swal; 


<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">

  <MudText Typo="Typo.h5" GutterBottom="true">Mantenimiento de Servicios</MudText>

   <MudPaper Elevation="3" Class="pa-4" Width="100%">
       <MudGrid>
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" 
            StartIcon="@Icons.Material.Filled.Add"
            Color="Color.Primary"
            OnClick="AbrirNuevoServicio">
                Nuevo Servicio</MudButton>
        </MudItem>
        <MudItem xs="12">
                <MudTable 
                    Items="@listaServicios"
                    Dense="true"
                    Striped="true" Bordered="true" 
                    Filter="new Func<ServicioDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1"
                    Loading="@_loading" LoadingProgressColor="Color.Info" >
                    @* <ToolBarContent>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Ingrese un texto y presione ENTER para buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent> *@
                    <ToolBarContent>
                        <MudTextField @bind-Value="searchString1" Placeholder="Buscar por descripción" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        <MudTextField @bind-Value="searchString2" Placeholder="Buscar por Tipo" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        <MudSpacer />
                        <MudButton OnClick="LimpiarFiltros" Color="Color.Secondary" Variant="Variant.Outlined">Limpiar Filtros</MudButton>
                    </ToolBarContent>
                    <HeaderContent >
                        <MudTh Style="width: 5px;">
                            <MudTableSortLabel SortBy="new Func<ServicioDTO, object>(x=> x.ArticuloId)">
                                Código
                            </MudTableSortLabel>
                         </MudTh>                        
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<ServicioDTO, object>(x=> x.Descripcion)">
                                Descripción
                            </MudTableSortLabel>
                         </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<ServicioDTO, object>(x=> x.TipoImpuesto.Descripcion)">
                                Impuesto
                            </MudTableSortLabel>
                        </MudTh>                        
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<ServicioDTO, object>(x=> x.TipoServicio.Descripcion)">
                                Tipo de Servicio
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<ServicioDTO, object>(x=> x.PrecioBase)">
                                Precio
                            </MudTableSortLabel>
                        </MudTh> 
                         <MudTh>
                            <MudTableSortLabel SortBy="new Func<ServicioDTO, object>(x=> x.Estado)">
                                Estado
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<ServicioDTO, object>(x=> x.Observacion)">
                                Observacion
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>Acciones</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="ServicioRow">
                        <MudTd DataLabel="Codigo">@ServicioRow.ArticuloId</MudTd>                        
                        <MudTd DataLabel="Descripcion">@ServicioRow.Descripcion</MudTd>
                        <MudTd DataLabel="Impuesto">@ServicioRow.TipoImpuesto.Descripcion</MudTd>
                        <MudTd DataLabel="Categoria">@((ServicioRow.TipoServicio?.Descripcion) ?? "")</MudTd>
                        <MudTd DataLabel="Precio">@ServicioRow.PrecioBase.ToString("N0")</MudTd>
                        <MudTd DataLabel="Estado">@((ServicioRow.Estado == "A") ? "Activo" : "Inactivo")</MudTd>
                        <MudTd DataLabel="Observacion">@ServicioRow.Observacion</MudTd>
                           <MudTd DataLabel="">
                            <MudFab Color="Color.Primary" 
                                StartIcon="@Icons.Material.Filled.Edit"
                                Size="Size.Small" 
                                IconSize="Size.Small"
                                    OnClick="@(() => AbrirEditarServicio(ServicioRow))" />
                            <MudFab 
                                Color="Color.Error" 
                                StartIcon="@Icons.Material.Filled.Delete" 
                                Size="Size.Small" 
                                IconSize="Size.Small"
                                OnClick="@(() => EliminarServicio(ServicioRow))"
                            />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager RowsPerPageString="Filas por Página:" />
                    </PagerContent>
                </MudTable>
        </MudItem>
    </MudGrid>
   </MudPaper>
</MudContainer>
@code {
    List<ServicioDTO> listaServicios = new List<ServicioDTO>();
    private string searchString1 = "";
    private string searchString2 = "";
    private ServicioDTO selectedItem1 = null;
    private bool _loading = true;

    private async Task ObtenerServicios()
    {
        var result = await _servicioService.ObtenerTodos<List<ServicioDTO>>();

        if (result.isExitoso)
        {
            listaServicios = (List<ServicioDTO>)result.Resultado!;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await ObtenerServicios();
        _loading = false;
    }

    private bool FilterFunc1(ServicioDTO element) => FilterFunc(element, searchString1, searchString2);

    private bool FilterFunc(ServicioDTO element, string searchString, string searchString_2)
    {
        if (string.IsNullOrWhiteSpace(searchString) && string.IsNullOrWhiteSpace(searchString_2))
            return true;

        var matchesSearch1 = string.IsNullOrWhiteSpace(searchString) || element.Descripcion.Contains(searchString, StringComparison.OrdinalIgnoreCase);
        var matchesSearch2 = string.IsNullOrWhiteSpace(searchString_2) || element.TipoServicio.Descripcion.Contains(searchString_2, StringComparison.OrdinalIgnoreCase);
   
        return matchesSearch1 && matchesSearch2;
    }

    private void LimpiarFiltros()
    {
        searchString1 = string.Empty;
        searchString2 = string.Empty;
    }

    private async Task AbrirNuevoServicio()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, BackdropClick = false };
        var dialogo = await _dialogServicio.ShowAsync<MdServicio>("Nuevo registro", options);
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            await ObtenerServicios();
        }
        //_navigationManager.NavigateTo($"/Servicio/ABM");
    }

    private async Task AbrirEditarServicio(ServicioDTO Servicio)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, BackdropClick = false };
        var parametros = new DialogParameters { ["_Servicio"] = Servicio };

        var dialogo = _dialogServicio.Show<MdServicio>("Editar registro", parametros, options);
        var resultado = await dialogo.Result;
        if (!resultado.Canceled)
        {
            await ObtenerServicios();
        }
        //_navigationManager.NavigateTo($"/Servicio/ABM/{Servicio.ArticuloId}");
    }

    private async Task EliminarServicio(ServicioDTO Servicio)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar la Servicio: {Servicio.Descripcion}({Servicio.ArticuloId})",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var resultado = await _servicioService.Eliminar<ServicioDTO>(Servicio.ArticuloId);

            if (resultado.isExitoso)
            {
                _snackBar.Add("La Servicio fue eliminada", Severity.Success, a => a.VisibleStateDuration = 500);
                await ObtenerServicios();
            }
            else
                _snackBar.Add($"No se pudo eliminar: Error: {string.Join(",",resultado.ErrorMessages)}", Severity.Error, a => a.VisibleStateDuration = 500);
        }
    }

}
