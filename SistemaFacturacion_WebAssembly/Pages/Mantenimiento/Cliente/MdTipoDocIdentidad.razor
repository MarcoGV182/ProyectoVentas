@inject ITipoDocIdentidadService _tipoDocService
@inject ISnackbar _snackBar

<MudDialog Style="width:400px">
    <DialogContent>
        <MudContainer Style="max-height: 400; overflow-y: scroll" Class="m-0 p-0">
            <EditForm Model="@_tipoDoc" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />

                <MudTextField @bind-Value="@_tipoDoc.Descripcion"
                Class="mb-3"
                Label="Descripcion"
                Variant="Variant.Outlined"
                Adornment="Adornment.End"
                AdornmentIcon="@Icons.Material.Filled.Badge"
                For="@(()=>_tipoDoc.Descripcion)" />

                <MudCardActions Class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@Cancel" Class="mr-2">Cancelar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Guardar</MudButton>
                </MudCardActions>
            </EditForm>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public TablaMenorDTO _tipoDoc { get; set; } = new TablaMenorDTO();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(_tipoDoc.Id);
    }    


    private async Task Guardar()
    {    
        try
        {
            string _mensaje = "";
            string _mensajeError = "";
            bool _resultado;

            TablaMenorCreateDTO _editRegistro = new TablaMenorCreateDTO();
            _editRegistro.Descripcion = _tipoDoc.Descripcion;


            if (_tipoDoc.Id != 0)
            {
                var response = await _tipoDocService.Actualizar(_tipoDoc.Id, _editRegistro);
                _resultado = response.isExitoso;
                _mensaje = "El registro fue modificado con éxito";
                _mensajeError = response.ErrorMessages == null ? "" : string.Join("\n", response?.ErrorMessages);
            }
            else
            {
                var response = await _tipoDocService.Crear(_editRegistro);
                _resultado = response.isExitoso;
                _mensajeError = response.ErrorMessages == null ? "" : string.Join("\n", response?.ErrorMessages);
                _mensaje = "El registro fue creado con éxito";
            }

            if (_resultado)
            {
                _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
                _snackBar.Add($"Error al guardar cambios: {_mensajeError}", Severity.Error, a => a.VisibleStateDuration = 500);
        }
        catch (Exception ex)
        {            
            _snackBar.Add($"Ocurrio un error: {ex}", Severity.Error, a => a.VisibleStateDuration = 500);
        }
        
    }
}
