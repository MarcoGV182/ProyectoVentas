@page "/cliente/ABM/{clienteId:int?}"
@using MudBlazor
@using System.Net.Http.Json
@inject NavigationManager Navigation
@inject HttpClient Http
@inject ISnackbar _snackBar
@inject IClienteService _clienteService
@inject ITipoDocIdentidadService _tipoDocService
@inject ICiudadService _ciudadService

@if (cargando)
{
    <div style="display: flex; justify-content: center; align-items: center; height: 300px;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
    </div>
}
else
{
    <MudGrid Spacing="2">
        <!-- Título -->
        @* <MudItem xs="12">
            <MudText Typo="Typo.h5" Class="mb-4">@Titulo</MudText>
        </MudItem> *@

        <!-- Contenedor del formulario -->
        <MudItem xs="12" sm="12" md="12">
            <MudPaper Class="pa-4" Style="height: auto; overflow-y: auto;">
                <MudForm @ref="form">

                    <!-- Campo 0: Código -->
                    @if (ClienteId != null)
                    {
                        <MudGrid Spacing="4">
                            <MudItem xs="12" md="6">
                                <MudInput Value="@ClienteId" Disabled="true" />
                            </MudItem>
                        </MudGrid>
                    }


                    <MudGrid Spacing="2">
                        <!-- Campo 1: Nombre -->
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Nombre" @bind-Value="@cliente.Nombre" For="@(() => cliente.Nombre)" />
                        </MudItem>

                        <!-- Campo 2: Apellido -->
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Apellido" @bind-Value="@cliente.Apellido" For="@(() => cliente.Apellido)" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudDatePicker Label="Fecha de Nac." @bind-Date="@cliente.FechaNacimiento" DateFormat="dd/MM/yyyy" PickerVariant="PickerVariant.Inline" Editable="true" Clearable="true" Mask="@(new DateMask("dd/MM/yyyy"))" />
                        </MudItem>


                        <!-- Campo 3: Tipo Documento -->
                        <MudSelect T="short?"
                        Label="Tipo Doc. Identidad"
                        Variant="Variant.Outlined"
                        Placeholder="Seleccione un tipo de Doc. Identidad"
                        Clearable="true"
                        @bind-Value="@cliente.TipoDocIdentidadId"
                        Validation="@(new Func<short?, string>(ValidarTipoDocumento))"
                        For="@(() => cliente.TipoDocIdentidadId)">
                            @foreach (var rol in ListaTipoDocumento)
                            {
                                <MudSelectItem Value=@((short?)rol.Id)>@rol.Descripcion</MudSelectItem>
                            }
                        </MudSelect>

                        <!-- Campo 4: Nro Documento -->
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Nro. Documento" @bind-Value="@cliente.Nrodocumento" For="@(() => cliente.Nrodocumento)" Validation="@(new Func<string, string>(ValidarNroDocumento))" Immediate="true" />
                        </MudItem>

                        <!-- Campo 5: Nro Documento -->
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Correo" @bind-Value="@cliente.Correo" For="@(() => cliente.Correo)" />
                        </MudItem>

                        <!-- Campo 6: Telefono -->
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Teléfono" @bind-Value="@cliente.Telefono" For="@(() => cliente.Telefono)" />
                        </MudItem>

                        <!-- Campo 7: Ciudad -->
                        <MudItem xs="12" md="6">
                            <MudSelect Label="Ciudad" T="short?" Variant="Variant.Outlined" @bind-Value="cliente.CiudadId" For="@(() => cliente.CiudadId)" Clearable="true" Placeholder="Seleccione una ciudad" Immediate="true">
                                @if (ListaCiudad.Any())
                                {
                                    foreach (var rol in ListaCiudad)
                                    {
                                        <MudSelectItem Value=@((short?)rol.CiudadId)>@rol.Descripcion</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudItem>

                        <!-- Campo 8: Dirección -->
                        <MudItem xs="12" md="6">
                            <MudTextField Label="Dirección" @bind-Value="@cliente.Direccion" For="@(() => cliente.Direccion)" />
                        </MudItem>

                        <!-- Campo 13: Observación -->
                        <MudItem xs="12">
                            <MudTextField Label="Observación" Variant="Variant.Outlined" Lines="3" @bind-Value="@cliente.Observacion" For="@(() => cliente.Observacion)" Class="mb-3" />
                        </MudItem>

                    </MudGrid>

                    <!-- Botones -->
                    <MudItem xs="12">
                        <MudPaper Class="pa-4 mt-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="Guardar">Guardar</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancelar">Cancelar</MudButton>
                        </MudPaper>
                    </MudItem>

                </MudForm>
            </MudPaper>
        </MudItem>

    </MudGrid>    
}






@code {
    // private string Titulo;
    private MudForm form;  
    private MudSelect<short?> tipoDocField;
    private MudTextField<string>? nroDocField;

    private ClienteCreateDTO cliente = new ClienteCreateDTO();

    public List<TablaMenorDTO> ListaTipoDocumento { get; set; } = new List<TablaMenorDTO>();
    public TablaMenorDTO tipoDocSeleccionada { get; set; }

    public List<CiudadDTO> ListaCiudad { get; set; } = new List<CiudadDTO>();
    public CiudadDTO ciudadSeleccionada { get; set; }    

    [Parameter]
    public int? ClienteId { get; set; }

    private bool cargando = true;   

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(ClienteId);
        await ObtenerListados();

        /*if (ClienteId == null)
        Titulo = "Registrar nuevo Cliente";
            else
            Titulo = "Actualizar Cliente";*/


    try
        {
            tipoDocSeleccionada = cliente.TipoDocIdentidadId == null ? null : ListaTipoDocumento.FirstOrDefault(p => p.Id == cliente.TipoDocIdentidadId);
            ciudadSeleccionada = cliente.CiudadId == null ? null : ListaCiudad.FirstOrDefault(p => p.CiudadId == cliente.CiudadId);
        }
        catch (Exception ex)
        {
            _snackBar.Add($"Error al obtener los datos: {ex.Message}", Severity.Error);
        }

        cargando = false;

    }

    private void Cancelar()
    {
        //Navigation.NavigateTo("/Cliente");
        MudDialog.Cancel();
    }    


    private string ValidarNroDocumento(string arg)
    {
        if (string.IsNullOrEmpty(arg) && cliente.TipoDocIdentidadId != null )
            return "Ingrese el nro de Documento";

        return null;
    }

    private string ValidarTipoDocumento(short? arg)
    {
        if (!arg.HasValue && cliente.Nrodocumento != null)
            return "Seleccione el tipo de Documento";

        return null;
    }


    private async Task ObtenerListados()
    {
        try
        {
            if (ClienteId.HasValue)
            {
                var resultProduct = await _clienteService.Obtener(ClienteId.Value);
                if (!resultProduct.isExitoso)
                {
                    _snackBar.Add($"Error al obtener el cliente: {resultProduct.ErrorMessages}", Severity.Error);
                    return;                    
                }
                var resultCliente = resultProduct.Resultado;
                cliente = CustomMapper.MapTo<ClienteDTO, ClienteCreateDTO>(resultCliente);
                cliente.TipoDocIdentidadId = resultCliente.TipoDocumentoIdentidad.Id;
            }

            var ciudadResult = await _ciudadService.ObtenerTodos();
            if (ciudadResult.isExitoso)
            {
                ListaCiudad =  ciudadResult.Resultado!;
            }

            var tipoDocResult = await _tipoDocService.ObtenerTodos();
            if (tipoDocResult.isExitoso)
            {
                ListaTipoDocumento = tipoDocResult.Resultado;
            }
        }
        catch (Exception ex)
        {
            _snackBar.Add($"Error al obtener los datos: {ex.Message}", Severity.Error);
        }

    }

    private async Task Guardar()
    {
        string _mensaje = "";
        string _error = "";
        bool _resultado;

        await form.Validate();

        if (!form.IsValid)
        {
            // Mostrar mensaje de error global si es necesario
            _snackBar.Add("Por favor, corrija los errores en el formulario.", Severity.Error);
            return;
        }

        /*ClienteCreateDTO _registro = new ClienteCreateDTO()
        {
            Nombre = cliente.Nombre,
                       Apellido = cliente.Apellido,
                       Observacion = cliente.Observacion,
                       CiudadId = ciudadSeleccionada != null ? ciudadSeleccionada.CiudadId : null,
                       TipoDocIdentidadId = tipoDocSeleccionada != null ? tipoDocSeleccionada.Id : null,
                       Correo = cliente.Correo,
                       Telefono = cliente.Telefono,
                       Direccion = cliente.Direccion,
                       FechaNacimiento = cliente.FechaNacimiento,
                       Nrodocumento = cliente.Nrodocumento

                   };*/

        if (ClienteId.HasValue)
        {
            var response = await _clienteService.Actualizar(ClienteId.Value, cliente);
            _resultado = response.isExitoso;
            _error = response.ErrorMessages != null ? string.Join("\n", response.ErrorMessages) : "";
            _mensaje = "El registro fue modificado con éxito";
        }
        else
        {
            var response = await _clienteService.Crear(cliente);
            _resultado = response.isExitoso;
            _error = response.ErrorMessages != null ? string.Join("\n", response.ErrorMessages) : "";
            _mensaje = "El registro fue creado con éxito";
        }

        if (_resultado)
        {
            _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);
            //Navigation.NavigateTo("/Cliente");
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
            _snackBar.Add($"Error al guardar cambios: {_error}", Severity.Error, a => a.VisibleStateDuration = 500);

        
    }
}
