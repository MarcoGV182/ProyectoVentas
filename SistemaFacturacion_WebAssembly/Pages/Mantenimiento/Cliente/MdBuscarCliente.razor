@inject IClienteService _ClienteService
@inject ISnackbar _snackBar


<MudDialog>
    <DialogContent>
        <MudTextField Label="Buscar por nombre o documento" @bind-Value="@criterioBusqueda" Immediate="true" @onkeydown="HandleKeyDown" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="BuscarClientes" Disabled="@isLoading">
            Buscar
        </MudButton>

        @if (isLoading)
        {
            <div class="d-flex justify-center mt-4">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" />
                <MudText Class="ml-2">Cargando lista...</MudText>
            </div>
        }
        else if (clientes.Any())
        {
            <MudTable Items="@clientes" Hover="true" Class="mt-4">
                <HeaderContent>
                    <MudTh>Nombre</MudTh>
                    <MudTh>Documento</MudTh>
                    <MudTh>Acciones</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Nombre</MudTd>
                    <MudTd>@context.Nrodocumento</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => SeleccionarCliente(context)">
                            Seleccionar
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <MudText Typo="Typo.body1" Class="mt-4">El Cliente ingresado no existe</MudText>
        }


    </DialogContent>
</MudDialog>

@code {
    private List<ClienteDTO> clientes = new List<ClienteDTO>();
    private string criterioBusqueda;
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await BuscarClientes();
    }


    private async Task BuscarClientes()
    {
        try
        {
            isLoading = true;
            StateHasChanged(); // Fuerza actualización UI
            var result = await _ClienteService.ObtenerTodos();

            if (!result.isExitoso)
            { 
                _snackBar.Add($"Error al cargar los clientes: {result.ErrorMessages}", Severity.Error);
                return;
            }

            if (!string.IsNullOrEmpty(criterioBusqueda))
            {                
                if (result.isExitoso)
                {
                    var listaClientes = result.Resultado;

                    clientes = listaClientes.Where(c => c.Nombre.Contains(criterioBusqueda, StringComparison.OrdinalIgnoreCase) ||
                            c.Apellido.Contains(criterioBusqueda, StringComparison.OrdinalIgnoreCase) ||
                            c.Nrodocumento.Contains(criterioBusqueda, StringComparison.OrdinalIgnoreCase))
                            .ToList();
                }
            }
            else
            {
                var listaClientes = result.Resultado;
                clientes = listaClientes;
            }
        }
        catch (Exception ex)
        {            
            _snackBar.Add($"Error al cargar los clientes: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
        
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key.ToUpper() == "ENTER")
        {
            await BuscarClientes();
        }
    }

    private void SeleccionarCliente(ClienteDTO cliente)
    {
        MudDialog.Close(DialogResult.Ok(cliente));
    }


}
