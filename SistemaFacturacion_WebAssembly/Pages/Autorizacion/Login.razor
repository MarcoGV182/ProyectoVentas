@page "/"
@page "/login"
@inject NavigationManager _navigationManager
@inject IUsuarioService _usuarioServicio
@inject AuthService _authService

@layout LoginLayout

<EditForm Model="@usuarioLogin" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>

    <MudText Typo="Typo.h4" GutterBottom="true" Align="Align.Center">Bienvenido</MudText>


    <MudTextField T="string"
    @bind-Value="@usuarioLogin.DireccionEmail"
    Label="Direccion de Email" 
    Variant="Variant.Outlined"
    For="@(() => usuarioLogin.DireccionEmail)" />

    <MudTextField Label="Contraseña" Variant="Variant.Outlined"
    @bind-Value="@usuarioLogin.Password" Class="mt-3"
    InputType="@PasswordInput"
    Adornment="Adornment.End"
    AdornmentIcon="@PasswordInputIcon"
    AdornmentAriaLabel="Mostrar Password"
    For="@(() => usuarioLogin.Password)"
    OnAdornmentClick="TogglePasswordVisibility" />

    <MudButton Class="mt-5" 
    Variant="Variant.Filled" 
    Color="Color.Primary" ButtonType="ButtonType.Submit" Size="Size.Large"
    FullWidth="true"
    Disabled="@disableButton">Iniciar Sesión</MudButton>

    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="@(myImageClass + " my-7")" />
</EditForm>

<MudAlert Severity="Severity.Error" Class="@(myAlert + " mt-8 mud-width-full")" Style="max-width:500px;" Elevation="25">@messageError</MudAlert>


@code {
    LoginDTO usuarioLogin = new LoginDTO();
    string myImageClass { get; set; } = "d-none";
    string myAlert { get; set; } = "d-none";
    bool disableButton { get; set; } = false;
    string messageError = "";

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task OnValidSubmit()
    {
        try
        {
            myImageClass = "d-block";
            disableButton = true;
            APIResponse<AutorizacionResponse> result = new APIResponse<AutorizacionResponse>();
            try
            {
                result = await _usuarioServicio.IniciarSesion(usuarioLogin);
            }
            catch (Exception ex)
            {
                messageError = ex.Message;
                myImageClass = "d-none";
                disableButton = false;
                myAlert = "d-block";
            }


            if (result.isExitoso)
            {
                // Usar AuthService para manejar la autenticación
                await _authService.LoginAsync(result.Resultado.Token, result.Resultado.Usuario);
                _navigationManager.NavigateTo("/producto");
            }
            else
            {
                messageError = result.Resultado?.Mensaje != null ? string.Join("\n", result.Resultado?.Mensaje) : "";
                myImageClass = "d-none";
                disableButton = false;
                myAlert = "d-block";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error:{ex.Message}");
        }


        
    }
}
