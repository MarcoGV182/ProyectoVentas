@page "/usuario"
@attribute [Authorize]
@inject IUsuarioService _UsuarioService
@inject IDialogService _dialogServicio
@inject ISnackbar _snackBar
@inject NavigationManager _navigationManager
@inject SweetAlertService Swal;


<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">

    <MudText Typo="Typo.h5" GutterBottom="true">Mantenimiento de Usuarios</MudText>

    <MudPaper Elevation="3" Class="pa-4" Width="100%">
        <MudGrid>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Add"
                           Color="Color.Primary"
                           OnClick="AbrirNuevaUsuario">
                    Nuevo Usuario
                </MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudTable Items="@listaUsuarios"
                          Dense="true"
                          Striped="true" Bordered="true"
                          Filter="new Func<UsuarioDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1"
                          Loading="@_loading" LoadingProgressColor="Color.Info">                   
                    <ToolBarContent>
                        <MudTextField @bind-Value="searchString1" Placeholder="Buscar por UserName" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        <MudTextField @bind-Value="searchString2" Placeholder="Buscar por Rol" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                     <MudSpacer />
                        <MudButton OnClick="LimpiarFiltros" Color="Color.Secondary" Variant="Variant.Outlined">Limpiar Filtros</MudButton>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh Style="width: 5px;">
                            <MudTableSortLabel SortBy="new Func<UsuarioDTO, object>(x=> x.UserName)">
                                Usuario
                            </MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<UsuarioDTO, object>(x=> x.Rol)">
                                Rol
                            </MudTableSortLabel>
                        </MudTh> 
                        <MudTh>Acciones</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="UsuarioRow">                       
                        <MudTd DataLabel="Usuario">@UsuarioRow.UserName</MudTd>
                        <MudTd DataLabel="Rol">@UsuarioRow.Rol</MudTd>
                      
                        <MudTd DataLabel="">
                            <MudFab Color="Color.Primary"
                                    StartIcon="@Icons.Material.Filled.Edit"
                                    Size="Size.Small"
                                    IconSize="Size.Small"
                                    OnClick="@(() => AbrirEditarUsuario(UsuarioRow))" />
                            <MudFab Color="Color.Error"
                                    StartIcon="@Icons.Material.Filled.Delete"
                                    Size="Size.Small"
                                    IconSize="Size.Small"
                                    OnClick="@(() => EliminarUsuario(UsuarioRow))" />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager RowsPerPageString="Filas por Página:" />
                    </PagerContent>
                </MudTable>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>
@code {
    List<UsuarioDTO> listaUsuarios = new List<UsuarioDTO>();
    private string searchString1 = "";
    private string searchString2 = "";
    private UsuarioDTO selectedItem1 = null;
    private bool _loading = true;

    private async Task ObtenerUsuarios()
    {
        var result = await _UsuarioService.ObtenerTodos();

        if (result.isExitoso)
        {
            listaUsuarios = result.Resultado;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await ObtenerUsuarios();
        _loading = false;
    }

    private bool FilterFunc1(UsuarioDTO element) => FilterFunc(element, searchString1, searchString2);

    private bool FilterFunc(UsuarioDTO element, string searchString, string searchString_2)
    {
        if (string.IsNullOrWhiteSpace(searchString) && string.IsNullOrWhiteSpace(searchString_2))
            return true;

        var matchesSearch1 = string.IsNullOrWhiteSpace(searchString) || element.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase);
        var matchesSearch2 = string.IsNullOrWhiteSpace(searchString_2) || element.Email.Contains(searchString_2, StringComparison.OrdinalIgnoreCase);
     
        return matchesSearch1 && matchesSearch2;
    }

    private void LimpiarFiltros()
    {
        searchString1 = string.Empty;
        searchString2 = string.Empty;
    }

    private async Task AbrirNuevaUsuario()
    {
        /*var options = new DialogOptions { CloseOnEscapeKey = true, BackdropClick = false };
        var dialogo = await _dialogServicio.ShowAsync<MdUsuario>("Nuevo registro", options);
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            await ObtenerUsuarios();
            }*/
        _navigationManager.NavigateTo($"/Usuario/ABM");
    }

    private async Task AbrirEditarUsuario(UsuarioDTO Usuario)
    {
        /*var options = new DialogOptions { CloseOnEscapeKey = true, BackdropClick = false };
        var parametros = new DialogParameters { ["_Usuario"] = Usuario };

        var dialogo = _dialogServicio.Show<MdUsuario>("Editar registro", parametros, options);
        var resultado = await dialogo.Result;
        if (!resultado.Canceled)
        {
            await ObtenerUsuarios();
            }*/
        _navigationManager.NavigateTo($"/Usuario/ABM/{Usuario.Id}");
    }

    private async Task EliminarUsuario(UsuarioDTO Usuario)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar el Usuario: {Usuario.UserName})",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var resultado = await _UsuarioService.Eliminar(Usuario.Id);

            if (resultado.isExitoso)
            {
                _snackBar.Add("El Usuario fue eliminado", Severity.Success, a => a.VisibleStateDuration = 500);
                await ObtenerUsuarios();
            }
            else
                _snackBar.Add($"No se pudo eliminar: Error: {string.Join(",", resultado.ErrorMessages)}", Severity.Error, a => a.VisibleStateDuration = 500);
        }
    }

}
