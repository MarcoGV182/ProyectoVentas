@inject ITipoImpuestoService _tipoImpuestoService
@inject ISnackbar _snackBar

<MudDialog Style="width:400px">
    <DialogContent>
        <MudContainer Style="max-height: 400px; overflow-y: scroll" Class="m-0 p-0">

            <EditForm Model="@_tipoimpuesto">

                <MudTextField @bind-Value="@_tipoimpuesto.Descripcion" Class="mb-3"
                              Label="Descripcion" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Badge" />

                <MudNumericField @bind-Value="@_tipoimpuesto.Baseimponible" Class="mb-3"
                              Label="Base Imponible" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Numbers" />

                <MudNumericField @bind-Value="@_tipoimpuesto.Porcentajeiva" Class="mb-3"
                             Label="Porcentaje IVA" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Numbers" />

            </EditForm>
        </MudContainer>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@Cancel">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Guardar">Guardar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public TipoImpuestoDTO _tipoimpuesto { get; set; } = new TipoImpuestoDTO();

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(_tipoimpuesto.TipoimpuestoNro);
    }

    void MostrarClave()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    private void Cancel()
    {
        Console.WriteLine("Cancelar presionado");
        MudDialog.Cancel();
    }

    private async Task Guardar()
    {
        TipoImpuestoDTO _nuevoimpuesto = new TipoImpuestoDTO();
        _nuevoimpuesto.TipoimpuestoNro = _tipoimpuesto.TipoimpuestoNro;
        _nuevoimpuesto.Descripcion = _tipoimpuesto.Descripcion;
        _nuevoimpuesto.Baseimponible = _tipoimpuesto.Baseimponible;
        _nuevoimpuesto.Porcentajeiva = _tipoimpuesto.Porcentajeiva;
        string _mensaje = "";
        bool _resultado;

        if (_tipoimpuesto.TipoimpuestoNro != 0)
        {
            var response = await _tipoImpuestoService.Actualizar<TipoImpuestoDTO>(_nuevoimpuesto);
            _resultado = response.isExitoso;
            _mensaje = "El registro fue modificado con exito";
        }
        else
        {
            var response = await _tipoImpuestoService.Crear<MarcaDTO>(_nuevoimpuesto);
            _resultado = response.isExitoso;
            _mensaje = "El registro fue creado con exito";
        }

        if (_resultado)
        {
            _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
            _snackBar.Add("Error al guardar cambios", Severity.Error, a => a.VisibleStateDuration = 500);

    }
}
