@page "/ventas"
@using MudBlazor
@using SistemaFacturacion_WebAssembly.Pages.Mantenimiento.Cliente
@using SistemaFacturacion_WebAssembly.Pages.Mantenimiento.Productos
@inject ISnackbar _Snackbar
@inject IVentaService _VentaService
@inject IClienteService _ClienteService
@inject IArticuloService _ArticuloService
@inject IRangoTimbradoService _rangoTimbradoService
@inject IDialogService _DialogService
@inject UsuarioEstadoService UserStateService

<MudGrid>
    <!-- Cabecera del formulario -->
    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h5">Datos Cliente</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <!-- Código Cliente -->
                    <MudItem xs="12" sm="4">
                        <MudTextField Label="Cliente" Value="ClienteFormateado" Disabled="true" />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AbrirModalBuscarCliente">
                            Buscar Cliente
                        </MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        @* <MudTextField InputType="InputType.Date" Label="Fecha" @bind-Value="@venta.Fecha" Format="yyyy-MM-dd" For="@(() => venta.Fecha)" /> *@
                        <MudDatePicker Label="Fecha (dd/MM/yyyy)" Editable="true"  Date="@venta.Fecha" DateFormat="dd/MM/yyyy" Mask="@(new DateMask("dd/MM/yyyy"))"/>
                    </MudItem>
                </MudGrid>
                <MudGrid>                   
                    <MudItem xs="12" sm="2">
                        <MudTextField InputType="InputType.Number" Label="Establecimiento" @bind-Value="@venta.Establecimiento" Format="000" Class="compact-field" For="@(() => venta.Establecimiento)" />
                    </MudItem>
                    <MudItem xs="12" sm="2">
                        <MudTextField InputType="InputType.Number" Label="Punto Exp." @bind-Value="@venta.PuntoExpedicion" Format="000" Class="compact-field" For="@(() => venta.PuntoExpedicion)" />
                    </MudItem>
                    <MudItem xs="12" sm="2">
                        <MudTextField InputType="InputType.Number" Label="Número" @bind-Value="@venta.Numero" Format="0000000" Class="compact-field" For="@(() => venta.Numero)" />
                    </MudItem>
                    <!-- Timbrado -->
                    <MudItem xs="12" sm="2">
                        <MudTextField Label="Timbrado"
                        Value="rangoTimbradoSeleccionado.Timbrado?.Numero"
                        Format="0000000"
                        Disabled="true"
                        Class="compact-field" />
                    </MudItem>

                    <MudItem xs="12" sm="3">
                        <MudRadioGroup T= "bool" 
                        Value="@esAutoimprenta"
                        ValueChanged="@(async (value) => await OnTipoSeleccionado(value))">
                            <MudRadio Value="true" Color="Color.Primary" Dense="true">Autoimprenta</MudRadio>
                            <MudRadio Value="false" Color="Color.Secondary" Dense="false">Manual</MudRadio>
                        </MudRadioGroup>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Sección de detalles de venta -->
    <MudItem xs="12" sm="8">
        <MudCard Class="mt-4">
            <MudCardHeader>
                <MudText Typo="Typo.h5">Detalles de Venta</MudText>
            </MudCardHeader>
            <MudCardContent>
                <!-- Tabla de productos -->
                <MudTable Items="@venta.DetalleVenta" Hover="true" Class="mt-2">
                    <HeaderContent>
                        <MudTh>Nro</MudTh>
                        <MudTh>Producto/Servicio</MudTh>
                        <MudTh>Precio</MudTh>
                        <MudTh>Cantidad</MudTh>
                        <MudTh>Total</MudTh>
                        <MudTh>Acciones</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <!-- item -->
                        <MudTd>
                            @context.NroItem
                        </MudTd>

                        <!-- Articulo -->
                        <MudTd>
                            <MudTextField Label="Artículo/Servicio"
                            Variant="Variant.Outlined"
                            @bind-Value="@context.DescripcionArticulo"
                            Adornment="Adornment.End"
                            ReadOnly="true" 
                            Disabled="false" 
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            OnAdornmentClick="() => AbrirModalBuscarArticulo(context)"
                            Class="compact-field" />
                        </MudTd>

                        <!-- Precio -->
                        <MudTd>
                            <MudNumericField @bind-Value="@context.Precio"
                            Immediate="true"
                            @bind-Value:after="() => CalcularTotales()"/>
                        </MudTd>

                        <!-- Cantidad -->
                        <MudTd>
                            <MudNumericField @bind-Value="@context.Cantidad"
                            Immediate="true"
                            @bind-Value:after="() => CalcularTotales()" />
                        </MudTd>

                        <!-- Total -->
                        <MudTd>
                            @((context.Cantidad * context.Precio).ToString("N0"))
                        </MudTd>

                        <!-- Acciones -->
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                            OnClick="() => EliminarDetalle(context)"
                            Size="Size.Small" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <!-- Botón para agregar producto -->
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AgregarDetalle" Class="mt-2">
                    Agregar Producto
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Sección de totales y botones de acción -->
    <MudItem xs="12" sm="4">
        <MudCard Class="mt-4">
            <MudCardHeader>
                <MudText Typo="Typo.h5">Totales</MudText>
            </MudCardHeader>
            <MudCardContent>               

                <!-- Total Impuestos -->
                <MudText Typo="Typo.h6">Total IVA: @totalIva.ToString("N0")</MudText>

                <!-- Total Impuestos -->
                <MudText Typo="Typo.h6">Total Gravado: @totalgravado.ToString("N0")</MudText>

                <!-- Total a Pagar -->
                <MudText Typo="Typo.h6">Total a Pagar: @TotalPagar.ToString("N0")</MudText>

                <!-- Botones de acción -->
                <MudGrid Class="mt-4">
                    <MudItem xs="12">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ResetForm" FullWidth="true">
                            Cancelar
                        </MudButton>
                    </MudItem>
                    <MudItem xs="12" Class="mt-2">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" FullWidth="true">
                            Generar Venta
                        </MudButton>
                    </MudItem>
                </MudGrid>

            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12">
        <MudCard>           
            <MudCardContent>
                <MudGrid>
                    <!-- Observacion -->
                    <MudItem xs="12" sm="4">
                        <MudTextField Label="Observacion" @bind-Value="@venta.Observacion" Lines="5" MaxLength=" 1000" HelperText="Aquí puede ingresar una observación en relación a la operación" Immediate="true" Variant="Variant.Filled" />
                    </MudItem>                    
                </MudGrid>

            </MudCardContent>
        </MudCard>
    </MudItem>

</MudGrid>

<style>
    /* CSS personalizado */
    .compact-field .mud-input {
    max-width: 150px; /* Ancho máximo para los campos */
    }

    .compact-field .mud-input-control {
    padding-top: 0 !important;
    padding-bottom: 0 !important;
    }
</style>

@code {
    private VentaCreateDTO venta = null;
    private List<ClienteDTO> clientes = new List<ClienteDTO>();
    private ClienteDTO clienteSeleccionado = null;
    private ArticuloDTO articuloSeleccionado = null;
    private RangoTimbradoDTO rangoTimbradoSeleccionado = new RangoTimbradoDTO();
    private List<ArticuloDTO> articulos = new List<ArticuloDTO>();
    private Shared utilidades = new Shared();
    private decimal TotalPagar = 0;
    private decimal totalIva = 0;
    private decimal totalgravado = 0;
    private bool esAutoimprenta = true;
    private string ClienteFormateado =>
    clienteSeleccionado != null
        ? $"{clienteSeleccionado.Apellido}, {clienteSeleccionado.Nombre} ({clienteSeleccionado.PersonaId})"
        : string.Empty;    



    private void AsignarPrecioBase(DetalleVentaCreateDTO detalle)
    {   
        if (articuloSeleccionado != null)
        {           
            detalle.ItemId = articuloSeleccionado.ArticuloId;
            detalle.TipoItem = articuloSeleccionado.TipoArticulo;
            detalle.Precio = articuloSeleccionado.PrecioBase;
            detalle.TipoimpuestoId = articuloSeleccionado.TipoImpuesto.TipoimpuestoId;
            articulos.Add(articuloSeleccionado);
            CalcularTotales(); // Actualizar los totales
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            venta = new VentaCreateDTO() { DetalleVenta = new List<DetalleVentaCreateDTO>()};
            venta.Fecha = DateTime.Now;

            await BuscarTimbrado();
        }
        catch (Exception ex)
        {
            _Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }

    }

    private void AgregarDetalle()
    {
        #region Validaciones
        if (!ValidacionesCompartidas())
            return;
        #endregion


        venta.DetalleVenta.Add(new DetalleVentaCreateDTO
        {
                NroItem = venta.DetalleVenta.Count + 1
        });
        articuloSeleccionado = null;
    }

    private void EliminarDetalle(DetalleVentaCreateDTO detail)
    {
        venta.DetalleVenta.Remove(detail);
        StateHasChanged();
    }

    private async Task OnTipoSeleccionado(bool nuevoValor)
    {
        esAutoimprenta = nuevoValor;
        await BuscarTimbrado();
    }


    private void CalcularTotales()
    {
        try
        {
            foreach (var detalle in venta.DetalleVenta)
            {
                var datosArticuloItem = articulos.FirstOrDefault(a => a.ArticuloId == detalle.ItemId);
                detalle.Total = detalle.Cantidad * (decimal)detalle.Precio;
                detalle.ImporteGravado = utilidades.CalcularImpuesto(detalle.Total,
                                                                     datosArticuloItem.TipoImpuesto.Porcentajeiva,
                                                                     datosArticuloItem.TipoImpuesto.Baseimponible, 0,
                                                                     "GRAVADO");
                detalle.ImporteIVA = utilidades.CalcularImpuesto(detalle.Total,
                                                                 datosArticuloItem.TipoImpuesto.Porcentajeiva,
                                                                 datosArticuloItem.TipoImpuesto.Baseimponible, 0,
                                                                 "IVA");
                detalle.ImporteExento = utilidades.CalcularImpuesto(detalle.Total,
                                                                  datosArticuloItem.TipoImpuesto.Porcentajeiva,
                                                                  datosArticuloItem.TipoImpuesto.Baseimponible, 0,
                                                                  "EXENTO");
            }            
        }
        catch (Exception)
        {   

        }
        finally
        {
            TotalPagar = venta.DetalleVenta.Sum(c => c.Total);
            totalIva = venta.DetalleVenta.Sum(c => c.ImporteIVA);
            totalgravado = venta.DetalleVenta.Sum(c => c.ImporteGravado);
        }    
    }

    private async Task Submit()
    {
        try
        {
            #region Validaciones
            if (clienteSeleccionado == null)
            {
                _Snackbar.Add("Favor seleccione un cliente", Severity.Error);
                return;
            }

            if (venta.DetalleVenta == null || venta.DetalleVenta.Count() == 0)
            {
                _Snackbar.Add("No existen registros en el detalle", Severity.Error);
                return;
            }

            if (!ValidacionesCompartidas())
                return;
            #endregion

            #region Cargar Datos
            venta.NroFactura = $"{venta.Establecimiento.ToString().PadLeft(3, '0')}-{venta.PuntoExpedicion.ToString().PadLeft(3, '0')}-{venta.Numero.ToString().PadLeft(7, '0')}";
            venta.EsAutoimprenta = esAutoimprenta ? "S" : "N";
            venta.UsuarioIdRegistro = UserStateService.CurrentUser.Id;
            venta.SucursalId = UserStateService.CurrentUser.SucursalId.Value;
            venta.DetalleVenta = venta.DetalleVenta;
            venta.Total = venta.DetalleVenta.Sum(s => s.Total);
            venta.TotalIVA = venta.DetalleVenta.Sum(s => s.ImporteIVA);
            venta.UbicacionId = 1;
            //venta.EmpresaId = 1;
            #endregion

            var resultado = await _VentaService.RegistrarVenta(venta);

            if (resultado.isExitoso)
            {
                _Snackbar.Add("Venta registrada correctamente!", Severity.Success);
                ResetForm();
            }
            else  
            {
                _Snackbar.Add($"Ocurrió un error: {string.Join(',',resultado.ErrorMessages)}", Severity.Error);
                return;
            }            

        }
        catch (Exception ex)
        {
            _Snackbar.Add($"Error al registrar: {ex.Message}", Severity.Error);
        }
    }

    private async Task AbrirModalBuscarCliente()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = _DialogService.Show<MdBuscarCliente>("Buscar Cliente", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            clienteSeleccionado = (ClienteDTO)result.Data;
            venta.ClienteId = clienteSeleccionado.PersonaId;
        }
    }

    private async Task AbrirModalBuscarArticulo(DetalleVentaCreateDTO detalle)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parametros = new DialogParameters { ["_Ubicacion"] = 1 };
        var dialog = _DialogService.Show<MdBuscarProducto>("Buscar Articulo/Servicio",parametros, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            articuloSeleccionado = (ArticuloDTO)result.Data;
            detalle.DescripcionArticulo = articuloSeleccionado != null ? $"{articuloSeleccionado.Descripcion}({articuloSeleccionado.ArticuloId})" : string.Empty;            
            AsignarPrecioBase(detalle);
        }
    }

    private async Task BuscarTimbrado()
    {       
        try
        {
            // Ejemplo de llamada a servicio
            var resultado = await _rangoTimbradoService.ObtenerTodos();

            if (resultado.isExitoso)
            {
                var listaTimbrado = resultado.Resultado;
                var TipoTimbradoActual = esAutoimprenta ? "Autoimprenta" : "Manual";

                if (!listaTimbrado.Any())
                {
                    _Snackbar.Add("No se encontraron timbrados", Severity.Warning);
                    return;
                }

                var timbradoEncontrado = listaTimbrado.Where(c => c.Timbrado.TipoTimbrado.Equals(TipoTimbradoActual) && c.Timbrado.Estado == "A" && c.TipoDocumentoId == TipoDocumento.Factura).FirstOrDefault();
                if (timbradoEncontrado != null)
                {
                    rangoTimbradoSeleccionado = timbradoEncontrado;
                    venta.TimbradoId = timbradoEncontrado.Timbrado.TimbradoId;
                    venta.Establecimiento = timbradoEncontrado.Nro_Establecimiento;
                    venta.PuntoExpedicion = timbradoEncontrado.Nro_PuntoExp;
                    venta.Numero = timbradoEncontrado.NroActual+1;
                }
                else
                {
                    _Snackbar.Add("No se encontraron timbrados", Severity.Warning);

                    rangoTimbradoSeleccionado = new RangoTimbradoDTO();
                    venta.TimbradoId = 0;
                    venta.Establecimiento = 0;
                    venta.PuntoExpedicion = 0;
                    venta.Numero = 0;
                    return;
                }
            }
            else
            {                
                _Snackbar.Add("No se encontraron timbrados", Severity.Warning);
                rangoTimbradoSeleccionado = new RangoTimbradoDTO();
                venta.TimbradoId = 0;
                venta.Establecimiento = 0;
                venta.PuntoExpedicion = 0;
                venta.Numero = 0;

                return;
            }


        }
        catch (Exception ex)
        {
            _Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {            
            StateHasChanged();
        }
    }

    private bool ValidacionesCompartidas()
    {
        var existeSinCantidad = venta.DetalleVenta.Where(c => c.Cantidad == 0);
        if (existeSinCantidad.Any())
        {
            _Snackbar.Add("La Cantidad no puede ser 0.\nFavor ingrese la cantidad", Severity.Error);
            return false;
        }

        var existeSinPrecio = venta.DetalleVenta.Where(c => c.Precio == 0);
        if (existeSinPrecio.Any())
        {
            _Snackbar.Add("Favor ingrese el precio", Severity.Error);
            return false;
        }

        return true;
    }

    private void ResetForm()
    {
        venta = new VentaCreateDTO() 
        { DetalleVenta = new List<DetalleVentaCreateDTO>()};
        clienteSeleccionado = null;
    }
}